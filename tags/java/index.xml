<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on savchenko.tech</title>
    <link>https://savchenko.tech/tags/java/</link>
    <description>Recent content in java on savchenko.tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://savchenko.tech/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin. Elegance that we missed in Java</title>
      <link>https://savchenko.tech/posts/springandkotlin/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://savchenko.tech/posts/springandkotlin/</guid>
      <description>For me, as a software engineer with experience in Java, Kotlin was definitely the language of interest. It is also JVM language, but promised to be improved, concise, readable and beautiful.
So, what are the advantages of Kotlin?
  Null safety - null references are detected at compile time.
  Fluency - fluent code is readable and easier (and cheaper) to maintain.
  Coroutines - a great way to implement non-blocking calls and gracefully handle exceptions.</description>
    </item>
    
    <item>
      <title>Waiting for Loom&#39;s virtual threads...</title>
      <link>https://savchenko.tech/posts/loom/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://savchenko.tech/posts/loom/</guid>
      <description>Since Alan Turing time we came from running one program at a time on bare metal to running millions of java virtual threads. Which is absolutely impressive.
Why? Why should we care about threads at all? The answer is - performance. Applying concurrency can improve performance in a few ways:
 reducing latency (process one task faster) hiding latency (process another task while waiting) increasing throughput (process more tasks).  Current java concurrency implementation is based on the rule that one Java thread equals exactly one OS thread (one-to-one mapping).</description>
    </item>
    
    <item>
      <title>Pattern matching in Java</title>
      <link>https://savchenko.tech/posts/patternmatching/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://savchenko.tech/posts/patternmatching/</guid>
      <description>To reduce duplication (boilerplate) in code pattern matching with if statements and the instanceof operator was introduced with Java version 16.
 Pattern matching is a technique of controlling program flow that only executes a section of code that meets certain criteria.
 Pattern matching with if and instanceOf In code example without pattern matching cast is needed.
 public Integer objectToString(Object object) {  if (object instanceof String) {  String string = (String) object;  return Integer.</description>
    </item>
    
  </channel>
</rss>
